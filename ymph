#!/bin/bash

function play() {
    file="$1"
    vlc-ctl add "$file"
}

function start_player() {
    vlcd
}

function stop_player() {
    vlc-ctl shutdown
}

function pause_player() {
    vlc-ctl pause
}

function resume_player() {
    vlc-ctl play
}

function show_help() {
    printf "Script helping you to play YouTube music playlists\n"
    printf "\n"
    printf "Available options:\n"
    printf "\n"
    printf "\t--help                   -h  print this text and exit\n"
    printf "\n"
    printf "\t--url <playlist_url>     -u  URL to the youtube playlist\n"
    printf "\t--save-as <save_file>    -s  save the playlist to the given file\n"
    printf "\t                             The file can be used with --file later on\n"
    printf "\t                             To be used with --url\n"
    printf "\t--file <playlist_file>   -f  use the specified playlist, previously saved with --save-as.\n"
    printf "\t                             Cannot be used together with --save-as\n"
    printf "\t                             If --url is not specified, it will take a default value.\n"
    printf "\t                             defaults to \$XDG_MUSIC_DIR/ymph.playlist,\n"
    printf "\t                                      or \$HOME/Music/ymph.playlist if \$XDG_MUSIC_DIR is not set\n"
    printf "\t--random                 -r  randomize the music order\n"
    printf "\t--normalize              -N  normalize audio file after download (disabled by default)\n"
    printf "\t                             [! might take some time]\n"
    printf "\t--no-cache                   delete audio files after playing them\n"
    printf "\t--next                 next  skip current music\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\t--prev                 prev  Back to previous music\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\t                             This command is supported only if the playlist was not randomized\n"
    printf "\t--stop                 stop  stop the player\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\t--pause               pause  pause the player\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\t--play                 play  resume the player\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\t--play-pause     play-pause  toggle play/pause\n"
    printf "\t                             An instance of ymph should already be running and have the same temp directory\n"
    printf "\n"
    printf "\t--load-ahead <N>             Specify the number of audio files to load ahead. Defaults to 3.\n"
    printf "\t--show-cache                 Show the list of files in cache folder. Any subsequent argument is ignored\n"
    printf "\t--search <regex>             Search a particular music in the cache. Any subsequent argument is ignored\n"
    printf "\t--clear-cache                Clears the cache. Any subsequent argument is ignored\n"
    printf "\t--deps-chk                   Check dependencies. Any subsequent argument is ignored\n"
    printf "\t--download-dir <folder>  -d  specifies a folder where to download audio file\n"
    printf "\t                             Defaults to \$XDG_CACHE_HOME/ymph,\n"
    printf "\t                                      or \$HOME/.cache/ymph if \$XDG_CACHE_HOME is not set\n"
    printf "\t--temp-dir <folder>          specifies a folder where to put temporary files.\n"
    printf "\t                             Defaults to \$XDG_RUNTIME_DIR, or /tmp/\$UID if \$XDG_RUNTIME_DIR is not set\n"
}

function download_sound() {
    printf -- "$DEFAULT_COLOR"
    printf "Preparing music for video $ID_COLOR$1\n"

    if [[ -f "$DOWNLOAD_DIR/$1" ]]; then
        printf -- "$DEFAULT_COLOR\tUsing cached $ID_COLOR$1$DEFAULT_COLOR\n"
        if [[ -f "$DOWNLOAD_DIR/$1.invalid" ]]; then
            rm -- "$DOWNLOAD_DIR/$1.invalid"
        fi
        return 0
    elif [[ -f "$DOWNLOAD_DIR/$1.invalid" ]]; then
        printf -- "$ERROR_COLOR\tError: $ID_COLOR$1$DEFAULT_COLOR has been marked as invalid.\n" >&2
        printf "\tTo try to redownload, delete the file $ID_COLOR$DOWNLOAD_DIR/$1.invalid$DEFAULT_COLOR\n" >&2
        return 1
    fi
    printf "\t$ID_COLOR$1$DEFAULT_COLOR is not present in cache. Downloading it.\n"

    local audio_formats=$(youtube-dl --no-warnings -F -- "$1" | grep "audio only" 2>/dev/null)
    local format_count=$(printf -- "$audio_formats" | wc -l)

    if [[ $format_count -gt 1 ]]; then
        local audio_formats_2=$(printf -- "$audio_formats" | grep -v "worst")
        local format_count=$(printf -- "$audio_formats" | wc -l)

        if [[ $format_count -ge 1 ]]; then
            local audio_formats="$audio_formats_2"
            local audio_formats_2=$(printf -- "$audio_formats" | grep "m4a")
            local format_count=$(printf -- "$audio_formats" | wc -l)

            if [[ $format_count -ge 1 ]]; then
                local audio_formats="$audio_formats_2"
            fi
        fi
    fi

    local format=$(printf -- "$audio_formats" | head -n1 | cut -d ' ' -f 1)
    local extension=$(printf -- "$audio_formats" | head -n1 | sed 's/[0-9]\+ \+//' | cut -d ' ' -f 1)

    youtube-dl --no-warnings -q -f $format --add-metadata -o "$DOWNLOAD_DIR/$1.$extension" -- "$1" >/dev/null 2>/dev/null

    if [[ $? == 0 ]]; then
        printf "\t$ID_COLOR$1$DEFAULT_COLOR: download complete.\n"

        if [[ $NORMALIZE == "true" ]]; then
            printf "\t$ID_COLOR$1$DEFAULT_COLOR: normalizing.\n"
            local file_info=$(ffmpeg -y -i "$DOWNLOAD_DIR/$1.$extension" -pass 1 -filter:a loudnorm=print_format=json -f null - 2>&1)
            local lra=$(printf -- "$file_info" | grep "input_lra" | sed 's/.*"input_lra" : "\(-\?[0-9]*\.[0-9]*\)".*/\1/')
            local tp=$(printf -- "$file_info" | grep "input_tp" | sed 's/.*"input_tp" : "\(-\?[0-9]*\.[0-9]*\)".*/\1/')
            local thresh=$(printf -- "$file_info" | grep "input_thresh" | sed 's/.*"input_thresh" : "\(-\?[0-9]*\.[0-9]*\)".*/\1/')
            local i=$(printf -- "$file_info" | grep "input_i" | sed 's/.*"input_i" : "\(-\?[0-9]*\.[0-9]*\)".*/\1/')

            yes | ffmpeg -loglevel panic -i "$DOWNLOAD_DIR/$1.$extension" -pass 2 -filter:a dynaudnorm=f=1000,loudnorm=linear=true:measured_I=$i:measured_LRA=$lra:measured_tp=$tp:measured_thresh=$thresh "$DOWNLOAD_DIR/$1.norm.$extension"

            rm -- "$DOWNLOAD_DIR/$1.$extension" 2>/dev/null
            mv -- "$DOWNLOAD_DIR/$1.norm.$extension" "$DOWNLOAD_DIR/$1" 2>/dev/null
        else
            mv -- "$DOWNLOAD_DIR/$1.$extension" "$DOWNLOAD_DIR/$1"
        fi
        printf -- "$ID_COLOR$1$DEFAULT_COLOR: ready.\n"

        return 0
    else

        printf -- "$ERROR_COLOR\tError$DEFAULT_COLOR downloading $ID_COLOR$1$DEFAULT_COLOR.\n" >&2
        touch "$DOWNLOAD_DIR/$1.invalid"
        return 1
    fi

}

function readable_size() {
    local size=$1
    local suffix="o"
    if [[ $size -gt 2048 ]]; then
        let "size = size / 1024"
        suffix="kio"
    fi
    if [[ $size -gt 2048 ]]; then
        let "size = size / 1024"
        suffix="Mio"
    fi
    if [[ $size -gt 2048 ]]; then
        let "size = size / 1024"
        suffix="Gio"
    fi
    printf -- "$size $suffix"
}

function readable_time() {
    local seconds=$1
    local minutes=$(($seconds / 60))
    let "seconds = seconds - 60 * minutes"

    local hours=$(($minutes / 60))
    let "minutes = minutes - 60 * hours"

    local days=$(($hours / 24))
    let "hours = hours - 24 * days"

    if [[ $days -gt 0 ]]; then
        printf -- "$days"
        printf "d "
    fi

    if [[ $hours -lt 10 ]]; then
        printf "0$hours:"
    else
        printf -- "$hours:"
    fi

    if [[ $minutes -lt 10 ]]; then
        printf "0$minutes'"
    else
        printf -- "$minutes'"
    fi

    if [[ $seconds -eq 0 ]]; then
        printf "00"
    elif [[ $seconds -lt 10 ]]; then
        printf "0$seconds"
    else
        printf -- "$seconds"
    fi
}

function skip_sig() {
    printf -- "$REQUEST_COLOR"
    printf "Received: next. ASAP Master\n"
    printf -- "$DEFAULT_COLOR"
    SKIP="true"
    PREV="false"
}

function prev_sig() {
    printf -- "$REQUEST_COLOR"
    printf "Received: prev. ASAP Master\n"
    printf -- "$DEFAULT_COLOR"
    PREV="true"
    SKIP="false"
}

function bye_sig() { 
    printf -- "$REQUEST_COLOR"
    printf "Received: quit. Good bye\n"
    printf -- "$DEFAULT_COLOR"
 
    rm -- "$PID_FILE"
    if [[ -f "$TEMPORARY_FILE" ]]; then
        rm -- "$TEMPORARY_FILE"
    fi

    if [[ $CACHING == "false" ]]; then
        rm -- "$DOWNLOAD_DIR/$id" 2>/dev/null
        rm -- "$DOWNLOAD_DIR/$current_id" 2>/dev/null
    fi

    rm -- "$DOWNLOAD_DIR/"*.* 2>/dev/null
    stop_player
    exit
}

function play_sig() {
    printf -- "$REQUEST_COLOR"
    printf "Received: play\n"
    printf -- "$DEFAULT_COLOR"
    
    if [[ $STATE == "pause" ]]; then
        STATE_CHANGED="true"
    fi
    STATE="play"

    if [[ $PAUSED_SINCE != "invalid" ]]; then
        local paused_until=$(date +%s)
        let "PAUSED_TIME += paused_until - PAUSED_SINCE"
    fi
    PAUSED_SINCE="invalid"

    resume_player
}

function toggle_sig() {
    if [[ $STATE == "play" ]]; then
        pause_sig
    else
        play_sig
    fi
}

function pause_sig() {
    printf -- "$REQUEST_COLOR"
    printf "Received: pause\n"
    printf -- "$DEFAULT_COLOR"

    if [[ $STATE == "play" ]]; then
        STATE_CHANGED="true"
    fi
    STATE="pause"
    STATE_CHANGED="true"
    PAUSED_SINCE=$(date +%s)
    pause_player
}

function quit_sig() {
    exit 1
}


function show_cache() {
    local size=0
    local duration=0
    local valid_count=0
    local invalid_count=0
    local heaviest=-1
    local heaviest_id=?
    local longest=-1
    local longest_id=?
    printf "Cache folder: $DOWNLOAD_DIR\n"
    printf "File list:\n"
    for i in $(ls "$DOWNLOAD_DIR"); do
        if [[ $(printf -- "$i" | cut -d '.' -f 2) == "invalid" ]]; then
            printf -- "$ID_COLOR$(printf -- "$i" | cut -d '.' -f 1)$ERROR_COLOR\tVideo is unavailable\n"
            let "invalid_count++"

        elif [[ $(printf -- "$i" | cut -d '.' -f 2) == "$i" ]]; then
            local dur_title=$(ffprobe -i $DOWNLOAD_DIR/$i -v quiet -print_format json -show_format | jq -r '.format.duration,.format.tags.title')
            local title=$(printf -- "$dur_title" | tail -n 1)
            local this_duration=$(printf -- "$dur_title" | head -n 1 | cut -d '.' -f 1)

            printf -- "$ID_COLOR$i\t$TITLE_COLOR$title\n"

            duration=$(($duration + $this_duration))
            if [[ $this_duration -gt $longest ]]; then
                longest=$this_duration
                longest_id=$i
            fi

            local this_size=$(stat --printf="%s" "$DOWNLOAD_DIR/$i")
            size=$(($size + $this_size))
            if [[ $this_size -gt $heaviest ]]; then
                heaviest=$this_size
                heaviest_id=$i
            fi

            let "valid_count++"
        fi
    done
    printf -- "$DEFAULT_COLOR"
    printf "\nValid tracks:     $valid_count"
    printf "\nBad tracks:       $invalid_count"
    printf "\nTotal cache size: "
    readable_size $size
    printf "\nTotal duration:   "
    readable_time $duration
    printf "\nHeaviest file:   $ID_COLOR $heaviest_id$DEFAULT_COLOR - $TITLE_COLOR$(ffprobe -i $DOWNLOAD_DIR/$heaviest_id -show_format -v quiet -print_format json | jq -r '.format.tags.title')"
    printf -- "$DEFAULT_COLOR ["
    readable_size $heaviest
    printf "]"
    printf "\nLongest music:   $ID_COLOR $longest_id$DEFAULT_COLOR - $TITLE_COLOR$(ffprobe -i $DOWNLOAD_DIR/$longest_id -show_format -v quiet -print_format json | jq -r '.format.tags.title')"
    printf -- "$DEFAULT_COLOR ["
    readable_time $longest
    printf "]\n"
}

function search_cache() {
    printf "Cache folder: $DOWNLOAD_DIR\n\n"
    local matches=()
    local matching=0
    local total=0
    for i in $(ls "$DOWNLOAD_DIR"); do
        if [[ $(printf -- "$i" | cut -d '.' -f 2) == "$i" ]]; then
            let "total++"
            local title=$(ffprobe -i $DOWNLOAD_DIR/$i -v quiet -print_format json -show_format | jq -r '.format.tags.title')
            if [[ $title =~ $1 ]]; then
                matches=(${matches[@]} "$ID_COLOR$i\t$TITLE_COLOR$title\n")
                let "matching++"
            fi
            printf "\rMatches: $matching/$total"
        fi
    done
    printf "\n\n"
    for i in ${matches[@]}; do
        printf -- $i
    done
}

function init() {
    COMMAND=$(printf -- "$0" | sed 's/.*\/\(.*\)/\1/')

    ID_COLOR="\e[38;5;14m"
    ERROR_COLOR="\e[38;5;9m"
    DEFAULT_COLOR="\e[38;5;15m"
    TITLE_COLOR="\e[38;5;82m"
    REQUEST_COLOR="\e[38;5;226m"

    SKIP="false"
    PREV="false"
    STATE_CHANGED="false"
    STATE="play"
    PAUSED_TIME=0
    PAUSED_SINCE="invalid"

    CUSTOM_PLAYLIST="false"
    RAND="false"
    SAVE_AS="false"
    REMOTE="none"
    NORMALIZE="false"
    CACHING="true"
    AHEAD_LOADING=3
 
    if [[ ! -z ${XDG_MUSIC_DIR+set} ]]; then
        PLAYLIST_FILE="$XDG_MUSIC_DIR/ymph.playlist"
    else
        PLAYLIST_FILE="$HOME/Music/ymph.playlist"
    fi

    if [[ ! -z ${XDG_CACHE_HOME+set} ]]; then
        DOWNLOAD_DIR="$XDG_CACHE_HOME/ymph"
    else
        DOWNLOAD_DIR="$HOME/.cache/ymph"
    fi

    if [[ ! -z ${XDG_RUTIME_DIR+set} ]]; then
        TEMPORARY_DIR="/tmp/$UID"
        mkdir -p "$TEMPORARY_DIR"
    else
        TEMPORARY_DIR="$XDG_RUNTIME_DIR"
    fi

}

function setup_traps() {
    trap bye_sig    INT
    trap skip_sig   34
    trap bye_sig    35
    trap prev_sig   36
    trap play_sig   37
    trap toggle_sig 38
    trap pause_sig  39
    trap quit_sig   40
}

function parse_args() {
    while [[ $# -ge 1 ]] ; do
        case "$1" in
        --help|-h|help)
            show_help
            exit 0
            ;;
        --save-as|-s)
            if [[ "$CUSTOM_PLAYLIST" == "true" ]]; then
                printf "field $1 is mutually exclusive with --file|-f.\n" >&2
                printf "Try $COMMAND --help.\n" >&2
                exit 1
            fi
            if [[ "$#" -gt 1 ]]; then
                shift
                PLAYLIST_FILE="$1"
                SAVE_AS="true"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --random|-r)
            shift
            RAND="true"
            ;;
        --url|-u)
            if [[ "$#" -gt 1 ]]; then
                shift
                PLAYLIST_URL="$1"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --file|-f)
            if [[ $SAVE_AS == "true" ]]; then
                printf "field $1 is mutually exclusive with --save-as|-s.\n" >&2
                printf "Try $COMMAND --help.\n" >&2
                exit 1
            fi
            if [[ "$#" -gt 1 ]]; then
                shift
                PLAYLIST_FILE="$1"
                CUSTOM_PLAYLIST="true"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --download-dir|-d)
            if [[ "$#" -gt 1 ]]; then
                shift
                DOWNLOAD_DIR="$1"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --temp-dir)
            if [[ "$#" -gt 1 ]]; then
                shift
                TEMPORARY_DIR=$1
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --next|next)
            REMOTE="-34"
            shift
            ;;
        --prev|prev)
            REMOTE="-36"
            shift
            ;;
        --stop|stop)
            REMOTE="-35"
            shift
            ;;
        --play|play)
            shift
            REMOTE="-37"
            ;;
        --play-pause|play-pause)
            shift
            REMOTE="-38"
            ;;
        --pause|pause)
            shift
            REMOTE="-39"
            ;;
        --normalize|-N)
            shift
            NORMALIZE="true"
            ;;
        --load-ahead)
            if [[ "$#" -gt 1 ]]; then
                shift
                re='^[1-9][0-9]*$'
                if ! [[ "$1" =~ $re ]] ; then
                    printf "field --load-ahead: $1 is not a positive integer.\n"
                    exit 1
                fi
                AHEAD_LOADING="$1"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            ;;
        --no-cache)
            shift
            CACHING=false
            ;;
        --show-cache)
            if [[ -d "$DOWNLOAD_DIR" ]]; then
                show_cache
            else
                printf "Cache is non-existant!\n"
            fi
            exit 0
            ;;
        --search)
            if [[ "$#" -gt 1 ]]; then
                shift
                search_cache "$1"
                shift
            else
                printf "field $1: missing operand.\nTry $COMMAND --help.\n" >&2
                exit 1
            fi
            exit 0
            ;;
        --clear-cache)
            rm "$DOWNLOAD_DIR"/* 2>/dev/null
            exit 0
            ;;
        --deps-chk)
            check_dependencies
            exit 0
            ;;
        *)
            printf -- "$COMMAND: $1: Unknow field.\nTry $COMMAND --help.\n" >&2
            exit 1
        esac

    done
}

function start_up() {
    PID_FILE="$TEMPORARY_DIR/ymph"
    TEMPORARY_FILE="$TEMPORARY_DIR/ymph.playlist"

    if [[ -f "$PID_FILE" ]]; then
        if [[ $(ps -ef | grep $(cat $PID_FILE) | grep ymph | wc -l) -eq 0 && $(ps -ef | grep $(cat $PID_FILE) | grep $COMMAND | wc -l) -eq 0 ]]; then
            printf -- "$ERROR_COLOR" >&2
            printf "Error:$DEFAULT_COLOR ymph seems to have died, but didn't clean up after him.\n" >&2
            printf "If that is the case, delete the file $PID_FILE\n"
            exit 3
        fi

        if [[ "$REMOTE" == "none" ]]; then
            printf "Already running!\n"
            exit 2
        else
            kill $REMOTE $(cat "$PID_FILE")
            exit 0
        fi
    elif [[ "$REMOTE" != "none" ]]; then
        printf "ymph is not running!\n"
        exit 2
    fi

    if [[ "$SAVE_AS" == "true" ]]; then
        if [[ -z "$PLAYLIST_URL" ]]; then
            printf "--save-dir field specified, but no url was given.\n" >&2
            printf "Try $COMMAND --help.\n" >&2
            exit 1
        fi
        mkdir -p "${PLAYLIST_FILE%/*}"
        youtube-dl --flat-playlist -j -- "$PLAYLIST_URL" | jq -r '.id' > "$PLAYLIST_FILE"
    else
        if [[ ! -z "$PLAYLIST_URL" ]]; then
            PLAYLIST_FILE="$TEMPORARY_FILE"
            mkdir -p "${PLAYLIST_FILE%/*}"
            youtube-dl --flat-playlist -j -- "$PLAYLIST_URL" | jq -r '.id' > "$PLAYLIST_FILE"
        fi
    fi

    if [[ ! -f "$PLAYLIST_FILE" ]]; then
        printf -- "$ERROR_COLOR" >&2
        printf "Error:$DEFAULT_COLOR Failed to open playlist file.\n" >&2
        exit 3
    fi
    if [[ $(wc -l "$PLAYLIST_FILE" | cut -d ' ' -f 1) -eq 0 ]]; then
        printf -- "$ERROR_COLOR" >&2
        printf "Error:$DEFAULT_COLOR the playlist is empty!\n" >&2
        exit 3
    fi

    mkdir -p "$DOWNLOAD_DIR"

    if [[ $RAND == "true" ]]; then
        shuf "$PLAYLIST_FILE" > "$TEMPORARY_DIR/ymph-shuf.playlist"
        PLAYLIST_FILE="$TEMPORARY_DIR/ymph-shuf.playlist"
    fi
}

function next_id() {
    let "COUNT++"
    if [[ $COUNT -gt $(wc -l "$PLAYLIST_FILE" | cut -d ' ' -f 1) ]]; then
        COUNT=1
    fi
    ID=$(head -n $COUNT "$PLAYLIST_FILE" | tail -n1)

    let "AHEAD_COUNT++"
    if [[ $AHEAD_COUNT -gt $(wc -l "$PLAYLIST_FILE" | cut -d ' ' -f 1) ]]; then
        AHEAD_COUNT=1
    fi
    AHEAD_ID=$(head -n $AHEAD_COUNT "$PLAYLIST_FILE" | tail -n1)
}

function prev_id() {
    let "COUNT--"
    if [[ $COUNT == 0 ]]; then
        COUNT=$(wc -l "$PLAYLIST_FILE" | cut -d ' ' -f 1)
    fi
    ID=$(head -n $COUNT "$PLAYLIST_FILE" | tail -n1)

    let "AHEAD_COUNT--"
    if [[ $AHEAD_COUNT == 0 ]]; then
        AHEAD_COUNT=$(wc -l "$PLAYLIST_FILE" | cut -d ' ' -f 1)
    fi
    AHEAD_ID=$(head -n  $AHEAD_COUNT "$PLAYLIST_FILE" | tail -n1)
}

function try_sleep() {
    sleep "$@" &
    local sleep_pid=$!
    wait $sleep_pid
    if [[ $(ps -e | grep $sleep_pid | grep sleep | wc -l) -gt 0 ]]; then
        kill $sleep_pid
        wait $sleep_pid 2>/dev/null
    fi
}

function main_loop() {
    start_player
    printf "$$" > "$PID_FILE"

    COUNT=0
    AHEAD_COUNT=$(($AHEAD_LOADING - 1))
    declare -A dl_pids
    local ans=1

    while [[ $ans != 0 ]]; do
        next_id
        download_sound "$ID"
        ans=$?
    done

    local count_cpy=$COUNT
    local ahead_cpy=$AHEAD_COUNT
    local id_cpy=$ID
    for i in $(seq 0 $(($AHEAD_LOADING - 1))); do
        next_id
        download_sound "$ID" &
        dl_pids["$ID"]=$!
    done
    COUNT=$count_cpy
    AHEAD_COUNT=$ahead_cpy
    ID=$id_cpy

    while [[ true ]]; do

        if [[ $PREV == "false" ]]; then
            if [[ ! -z "$current_id" && -f "$DOWNLOAD_DIR/$current_id" ]]; then
                if [[ $CACHING == "false" && "$current_id" != "$ID" ]]; then
                    rm "$DOWNLOAD_DIR/$current_id" 2>/dev/null
                fi
            fi
            current_id="$ID"

            printf -- "$ID_COLOR"
            printf "Now playing $TITLE_COLOR$(ffprobe -i $DOWNLOAD_DIR/$current_id -show_format -v quiet | grep TAG:title | cut -d '=' -f 2)$DEFAULT_COLOR [$ID_COLOR$current_id$DEFAULT_COLOR]\n"

            while [[ $STATE == "pause" && $SKIP == "false" ]]; do
                try_sleep 10d
            done

            if [[ $SKIP == "false" ]]; then
                play "$DOWNLOAD_DIR/$current_id"
            fi
        else
            prev_id
        fi

        ans=1
        local starting_time=$(date +%s)
        NOSLEEP="false"
        PAUSED_TIME=0
        while [[ $ans != 0 ]]; do

            if [[ $PREV == "true" ]]; then
                
                kill -40 ${dl_pids["$AHEAD_ID"]} 2>/dev/null
                rm "$DOWNLOAD_DIR/$AHEAD_ID."* 2>/dev/null
                unset dl_pids["$AHEAD_ID"]

                local id_being_loaded="$ID"

                prev_id
                current_id=""
                PREV="false"
                NOSLEEP="true"

                if [[ ! -n ${dl_pids["$id_being_loaded"]} ]]; then
                    download_sound "$id_being_loaded" >/dev/null &
                    dl_pids["$id_being_loaded"]=$!
                fi

                if [[ ! -n ${dl_pids["$ID"]} ]]; then
                    download_sound "$ID" &
                    dl_pids["$ID"]=$!
                fi

                wait ${dl_pids["$ID"]}
                ans=$?
                while [[ $PREV == "false" && $ans -ge 128 ]]; do
                    wait ${dl_pids["$ID"]}
                    ans=$?
                done

                if [[ $PREV == "false" ]]; then
                    unset dl_pids["$ID"]
                fi

                if [[ $ans != 0 ]]; then
                    PREV="true"
                fi

            else
                next_id

                if [[ ! -n ${dl_pids["$AHEAD_ID"]} ]]; then
                    download_sound $AHEAD_ID &
                    dl_pids["$AHEAD_ID"]=$!
                fi

                if [[ ! -n ${dl_pids["$ID"]} ]]; then
                    download_sound $ID &
                    dl_pids["$ID"]=$!
                fi

                wait ${dl_pids["$ID"]}
                ans=$?

                while [[ $PREV == "false" && $ans -ge 128 ]]; do
                    wait ${dl_pids["$ID"]}
                    ans=$?
                done

                if [[ $PREV == "false" ]]; then
                    unset dl_pids["$ID"]
                else
                    prev_id
                fi

            fi

            if [[ $PREV == "true" ]]; then
                ans=1
            fi

        done

        if [[ $SKIP == "false" && $NOSLEEP="false" ]]; then
            local total_duration="$(ffprobe -i $DOWNLOAD_DIR/$current_id -show_entries format=duration -v quiet -of csv="p=0" | cut -d '.' -f 1)"
            local ending_time=$(date +%s)
            if [[ $STATE == "pause" ]]; then
                local paused_until=$(date +%s)
                let "PAUSED_TIME += paused_until - PAUSED_SINCE"
            fi
            local total_sleep_time=$(($total_duration + $starting_time - $ending_time + $PAUSED_TIME))
            if [[ $total_sleep_time -lt 0 ]]; then
                total_sleep_time=0
            fi

            while [[ $total_sleep_time -gt 0 && $SKIP == "false" && $PREV == "false" ]]; do
                if [[ $STATE == "pause" ]]; then
                    try_sleep 10d
                else
                    local sleep_beg=$(date +%s)
                    try_sleep $total_sleep_time
                    local sleep_end=$(date +%s)
                    let "total_sleep_time -= sleep_end - sleep_beg"
                fi
            done
        fi
        SKIP="false"
    done
}

function check_dependency() {
    printf "\t\t$1:"
    for i in $(seq $(printf -- "$1" | wc -c) 10); do
        printf " "
    done

    if hash $1 2>/dev/null; then
        printf "\e[38;5;82m present\e[38;5;15m\n"
    else
        printf "\e[38;5;9m missing\e[38;5;15m\n"
    fi
}

function check_dependencies() {
    printf "Core:\n"
    printf "\t[coreutils]:\n"
    check_dependency cat
    check_dependency cut
    check_dependency date
    check_dependency head
    check_dependency mkdir
    check_dependency mv
    check_dependency printf
    check_dependency rm
    check_dependency seq
    check_dependency shuf
    check_dependency sleep
    check_dependency tail
    check_dependency touch
    check_dependency wc

    printf "\t[ffmpeg]:\n"
    check_dependency ffprobe

    printf "\t[grep]:\n"
    check_dependency grep

    printf "\t[jq]:\n"
    check_dependency jq

    printf "\t[procps-ng]:\n"
    check_dependency ps

    printf "\t[sed]:\n"
    check_dependency sed

    printf "\t[util-linux]:\n"
    check_dependency kill

    printf "\t[youtube-dl]:\n"
    check_dependency youtube-dl


    printf "\n"
    printf "Required by --show-cache:\n"
    printf "\t[coreutils]:\n"
    check_dependency ls
    check_dependency stat

    printf "\n"
    printf "Required by --normalize:\n"

    printf "\t[coreutils]:\n"
    check_dependency yes

    printf "\t[ffmpeg]:\n"
    check_dependency ffmpeg
}

init
parse_args "$@"
setup_traps
start_up
main_loop

